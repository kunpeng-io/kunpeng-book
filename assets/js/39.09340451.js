(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{365:function(v,_,o){"use strict";o.r(_);var e=o(4),i=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"常用的-springboot-功能性注解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用的-springboot-功能性注解"}},[v._v("#")]),v._v(" 常用的 SpringBoot 功能性注解：")]),v._v(" "),_("p",[v._v("以下是 Spring Boot 中常用的注解及其作用：")]),v._v(" "),_("ol",[_("li",[_("p",[_("code",[v._v("@SpringBootApplication")]),v._v("：标识一个主程序类，表示该类是 Spring Boot 应用的入口，同时包含了 "),_("code",[v._v("@Configuration")]),v._v("、"),_("code",[v._v("@EnableAutoConfiguration")]),v._v(" 和 "),_("code",[v._v("@ComponentScan")]),v._v(" 注解的组合。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@RestController")]),v._v("：标识一个类是 Spring MVC 控制器，并且该控制器中的所有方法都返回 JSON 数据。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@RequestMapping")]),v._v("：映射 HTTP 请求到控制器的处理方法上，用于指定请求 URL 和 HTTP 请求方法。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Autowired")]),v._v("：自动装配 Bean，通过类型或名称进行装配。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Value")]),v._v("：注入配置属性值，可以在类成员变量、方法参数、构造函数参数上使用。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Component")]),v._v("：泛指 Spring 管理的组件，包括 "),_("code",[v._v("@Service")]),v._v("、"),_("code",[v._v("@Repository")]),v._v("、"),_("code",[v._v("@Controller")]),v._v(" 等。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Service")]),v._v("：标识一个类是业务逻辑层的 Bean。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Repository")]),v._v("：标识一个类是数据访问层的 Bean。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Controller")]),v._v("：标识一个类是 Spring MVC 控制器。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Configuration")]),v._v("：标识一个类是 Spring 配置类，用于定义 Bean。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@EnableAutoConfiguration")]),v._v("：开启 Spring Boot 的自动配置功能，根据 classpath 中的 jar 包自动配置 Spring 应用。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Conditional")]),v._v("：根据条件来决定是否创建 Bean，可以与其他注解组合使用。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Profile")]),v._v("：指定 Bean 的环境，只有在指定的环境下才会创建 Bean。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Bean")]),v._v("：标识一个方法返回一个 Bean，可以用于定义自己的 Bean。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Import")]),v._v("：导入其他配置类。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@EnableAspectJAutoProxy")]),v._v("：开启 Spring AOP 的自动代理功能。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Aspect")]),v._v("：标识一个类是切面类。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Pointcut")]),v._v("：定义切入点，用于匹配连接点。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Before")]),v._v("：在方法执行前执行通知。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@AfterReturning")]),v._v("：在方法正常返回后执行通知。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@AfterThrowing")]),v._v("：在方法抛出异常后执行通知。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Around")]),v._v("：在方法执行前后都执行通知。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Transactional")]),v._v("：标识一个方法需要事务管理，可以用于类或方法上。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Cacheable")]),v._v("：标识一个方法的返回值可以被缓存到缓存中，可以用于类或方法上。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@CacheEvict")]),v._v("：标识一个方法需要从缓存中清除数据，可以用于类或方法上。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Scheduled")]),v._v("：标识一个方法需要定时执行，可以用于类或方法上。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@EnableScheduling")]),v._v("：开启 Spring 的定时任务功能。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@EnableAsync")]),v._v("：开启 Spring 的异步执行功能。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Async")]),v._v("：标识一个方法需要异步执行。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@PathVariable")]),v._v("：获取 URL 中的参数值。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@RequestParam")]),v._v("：获取请求参数的值。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@RequestBody")]),v._v("：获取请求体中的数据。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@ResponseStatus")]),v._v("：指定响应状态码和原因短语。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@ExceptionHandler")]),v._v("：处理异常，并返回自定义的响应结果。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@ControllerAdvice")]),v._v("：全局异常处理器，处理整个应用中的异常。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@CrossOrigin")]),v._v("：允许跨域请求。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@Validated")]),v._v("：开启参数校验功能。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@NotNull")]),v._v("、"),_("code",[v._v("@Min")]),v._v("、"),_("code",[v._v("@Max")]),v._v("、"),_("code",[v._v("@Size")]),v._v(" 等：常用的参数校验注解，用于校验请求参数的合法性。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@JsonFormat")]),v._v("：指定 JSON 序列化和反序列化时的日期格式。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@JsonIgnore")]),v._v("：忽略某些字段的序列化和反序列化。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@JsonInclude")]),v._v("：指定 JSON 序列化时包含的字段。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@JsonProperty")]),v._v("：指定 JSON 字段名。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@RestControllerAdvice")]),v._v("：全局异常处理器，结合 "),_("code",[v._v("@RestController")]),v._v(" 注解使用。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@ConfigurationProperties")]),v._v("：将配置文件中的属性值注入到 Bean 中。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@ConditionalOnProperty")]),v._v("：根据配置文件中的属性值来决定是否创建 Bean。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@ConditionalOnClass")]),v._v("：当 classpath 中存在指定的类时才创建 Bean。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@ConditionalOnMissingBean")]),v._v("：当容器中不存在指定的 Bean 时才创建 Bean。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("@EnableConfigurationProperties")]),v._v("：开启配置属性注入功能。")])])])])}),[],!1,null,null,null);_.default=i.exports}}]);